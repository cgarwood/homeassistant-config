button_card_templates:
  light_button:
    type: 'custom:button-card'
    show_state: true
    show_name: true
    show_label: false
    styles:
      icon:
        - height: auto
      img_cell:
        - justify-content: start
        - align-items: start
        - font-size: 14px
      grid:
        - grid-template-areas: '"i . info" "n n n" "s s s" "l l l"'
        - grid-template-columns: 50px 1fr 32px
        - grid-template-rows: 1fr 0.min-content min-content min-content
        - position: relative
      card:
        - padding: 8px
        - height: 100%
      name:
        - justify-self: start
        - align-self: end
        - font-weight: 300
        - font-size: 16px
        - text-align: start
        - position: relative
        - display: inline-block
        - width: 100%
        - align-content: start
        - text-align: start
        - text-overflow: unset
      state:
        - justify-self: start
        - align-self: end
        - font-weight: bold
        - font-family: Helvetica
        - font-size: 12px
        - text-align: start
      custom_fields:
        info:
          - align-self: start
    extra_styles: |
      :host { display: inline !important; }
    custom_fields:
      info: |
        [[[
          function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
          }

          let length = 41;
          const width = 3;

          if (entity.state === 'on' && entity.attributes.brightness) {
            const radius = length / 2;
            const brightness = Math.round(entity.attributes.brightness / 2.54);
            const circumference = radius * 2 * Math.PI;
            return `
              <svg viewBox="0 0 50 50">
                <circle cx="25" cy="25" r="${radius}" fill="none" stroke="var(--paper-item-icon-color)" opacity="0.5" stroke-width="${width}" />
                <circle style="
                    transform: rotate(-90deg);
                    transform-origin: 50% 50%;
                    stroke-dasharray: ${circumference};
                    stroke-dashoffset: ${circumference - brightness / 100 * circumference};
                  "
                  id="c_brightness" cx="25" cy="25" r="${radius}" stroke="var(--paper-item-icon-active-color)" stroke-width="${width}" fill="none" stroke-linecap="round" />
                <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${brightness}<tspan font-size="10">%</tspan>
                </text>
              </svg>
              `;
            }
        ]]]
    state:
      - value: 'on'
        styles:
          card:
            - opacity: 1
          icon:
            - color: |
                [[[
                  var [domain, object_id] = entity.entity_id.split('.');
                  if (domain === "light")
                    return 'var(--button-card-light-color)';
                  return 'var(--paper-item-icon-color)';
                ]]]
          state:
            - color: gray
          name:
            - color: var(--primary-text-color)
          lock:
            - color: white
          label:
            - color: gray
      - value: 'off'
        styles:
          card:
            - opacity: 0.5
          icon:
            - color: var(--paper-item-icon-color)
          name:
            - color: var(--primary-text-color)
          state:
            - color: var(--primary-text-color)
          label:
            - color: var(--primary-text-color)
          lock:
            - color: var(--paper-item-icon-color)
      - value: unavailable
        styles:
          card:
            - opacity: 0.2
          icon:
            - color: var(--paper-item-icon-color)
          name:
            - color: var(--primary-text-color)
          state:
            - color: 'hsl(0, 100%, 50%)'
          label:
            - color: var(--primary-text-color)
          lock:
            - color: var(--paper-item-icon-color)
    tap_action:
      action: toggle
      haptic: light
    hold_action:
      action: more-info
      haptic: heavy
  fan_button:
    type: 'custom:button-card'
    aspect_ratio: 1/1
    size: 60%
    show_state: true
    show_name: true
    show_label: false
    styles:
      icon:
        - height: auto
      img_cell:
        - justify-content: start
        - align-items: start
        - font-size: 14px
      grid:
        - grid-template-areas: '"i . info" "n n n" "s s s" "l l l"'
        - grid-template-columns: 50px 1fr 50px
        - grid-template-rows: 1fr 0.min-content min-content min-content
        - position: relative
      card:
        - padding: 8px
      name:
        - justify-self: start
        - align-self: end
        - font-weight: 300
        - font-size: 16px
        - text-align: start
        - position: relative
        - display: inline-block
        - width: 100%
        - align-content: start
        - text-align: start
        - text-overflow: unset
      state:
        - justify-self: start
        - align-self: end
        - font-weight: bold
        - font-size: 12px
        - text-align: start
      custom_fields:
        info:
          - align-self: start
          - margin-left: '-13px'
          - margin-right: 16px
          - margin-top: '-8px'
    custom_fields:
      info: |
        [[[
          function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
          }

          let length = 41;
          const width = 3;

          if (entity.state === 'on' && entity.attributes.speed && entity.attributes.speed_list)  {
            const text = capitalizeFirstLetter(entity.attributes.speed);
            const gap = 5;
            const edge = (50 - length) / 2;
            const y = 38 - edge;
            var items = entity.attributes.speed_list;
            items = items.filter(function(item) { return item !== 'off' })
            items = items.filter(function(item) { return item !== 'on' })
            items = items.filter(function(item) { return item !== 'auto' })
            items = items.filter(function(item) { return item !== 'smart' })
            const current = items.indexOf(entity.attributes.speed)
            var i;
            var x1 = edge;
            var ret = `<svg  viewBox="0 0 50 50">`;
            var l = (length - gap * (items.length - 1)) / items.length;
            for (i = 0; i < items.length; i++) {
              var x2 = x1 + l;
              var color = (i <= current) ? "var(--paper-item-icon-active-color)" : "var(--paper-item-icon-color)";
              var opacity = (i <= current) ? "1.0" : "0.5";
              ret += `<line x1="${x1}" y1="${y}" x2="${x2}" y2="${y}" stroke="${color}" stroke-width="${width}" opacity="${opacity}" stroke-linecap="round" />`;
              x1 = x2 + gap;
            }
            ret += `<text x="50%" y="42%" fill="var(--primary-text-color)" font-size="14" text-anchor="middle" alignment-baseline="middle">${text}</text></svg>`
            return ret;
          }
        ]]]
    state:
      - value: 'on'
        spin: true
        styles:
          card:
            - opacity: 1
          icon:
            - color: |
                [[[
                  var [domain, object_id] = entity.entity_id.split('.');
                  if (domain === "light")
                    return 'var(--button-card-light-color)';
                  return 'var(--paper-item-icon-color)';
                ]]]
          state:
            - color: gray
          name:
            - color: var(--primary-text-color)
          lock:
            - color: white
          label:
            - color: gray
      - value: 'off'
        styles:
          card:
            - opacity: 0.5
          icon:
            - color: var(--paper-item-icon-color)
          name:
            - color: var(--primary-text-color)
          state:
            - color: var(--primary-text-color)
          label:
            - color: var(--primary-text-color)
          lock:
            - color: var(--paper-item-icon-color)
      - value: unavailable
        styles:
          card:
            - opacity: 0.2
          icon:
            - color: var(--paper-item-icon-color)
          name:
            - color: var(--primary-text-color)
          state:
            - color: 'hsl(0, 100%, 50%)'
          label:
            - color: var(--primary-text-color)
          lock:
            - color: var(--paper-item-icon-color)
    tap_action:
      action: toggle
      haptic: light
    hold_action:
      action: more-info
      haptic: heavy
  mini-button:
    styles:
      card:
        - font-size: 12px
        - padding: 8px 8px 8px 8px
      img_cell:
        - width: 48px
        - margin-bottom: 4px
      label:
        - opacity: 0.8
        - font-size: 11px
      name:
        - font-size: 1em
        - font-weight: 300

title: Living Room Tablet
views:
  - path: dashboard
    title: Dashboard
    panel: false
    background: center / cover no-repeat fixed  url('https://local.garwood.family/tileboard/images/bg2.png')
    kiosk_mode:
      mobile_settings:
        hide_header: true
    type: 'custom:tileboard-view'
    view_layout:
      tile_size: 120
      tile_margin: 8
    visible:
    - user: ab365b8e49fe4fbaa3f6eef98157a440
    - user: 7638ce19125941849e6d3d45309f0c93
    badges: []
    cards:
      - type: 'custom:swipe-card'
        view_layout:
          width: 3
          height: 2
        start_card: 1
        reset_after: 30
        parameters:
          spaceBetween: 8
          autoHeight: false
          pagination:
            type: bullets
        cards:
          - type: weather-forecast
            entity: weather.dark_sky
            style: |
              ha-card {
                background: transparent;
                color: white;
                box-shadow: none;
              }
          - type: markdown
            content: >
              <table><tr><td width="200px">
                <h3>test</h3>
                <strong>Current Temperature:</strong> {{state_attr('weather.dark_sky','temperature') | round}}&deg;F</br>
                {% if is_state("sun.sun","above_horizon") -%}
                  <strong>Next Sunset:</strong> {{as_timestamp(strptime(state_attr("sun.sun", "next_setting"), '')) | timestamp_custom("%-I:%M %p")}}
                {%- else -%}
                  <strong>Next Sunrise:</strong> {{as_timestamp(strptime(state_attr("sun.sun", "next_rising"), '')) | timestamp_custom("%-I:%M %p")}}
                {%- endif %}</br></br>
                <strong>SmartHome Mode:</strong> {{ states('input_text.home_mode') }}</br>
                <strong>Doors:</strong> {{ states('sensor.door_locks')}}</br>
              </td><td></br><img
              src="https://darksky.net/{{states('sensor.dashboard_weather')}}"
              width="190px" /></td></tr> <tr><td colspan="2">{{
              states('sensor.dashboard_occupancy')
              }}</td></tr></table></br>
            style: |
              ha-card {
                background: transparent;
                color: white;
              }
          - type: markdown
            content: >
              test test test